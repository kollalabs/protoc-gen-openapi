// Copyright 2020 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package tests.bodymappying.message.v1;

import "google/api/annotations.proto";
import "envoy/validate.proto";

option go_package = "github.com/google/gnostic/apps/protoc-gen-openapi/examples/tests/bodymapping/message/v1;message";

service Messaging {
    // Update Message Summary | This function updates a message.
    rpc UpdateMessage(Message) returns(Message) {
        option(google.api.http) = {
            patch: "/v1/messages/{message_id}"
            body: "text"
        };
    }
}
message Message {
    string message_id = 1;
    string text = 2 [
    (validate.rules)= {
        string: {
            uri:true, 
            max_len:45,
            min_len:1
        }
    }];

    int64 mynum = 3 [(validate.rules).int64 = {gte:1, lte:30}];

    repeated string patterns = 4 [
        (validate.rules).repeated = {
          ignore_empty: true,
          min_items: 1,
          max_items: 100,
          items: {
            string: {pattern: "^patterns/[a-z0-9]{26}$"}
          }
        }
    ];

    // enum options approval state
    enum ApprovalState {
      // Default
      APPROVAL_STATE_UNSPECIFIED = 0;
      // Pending
      PENDING_APPROVAL = 1;
      // Approved
      APPROVED = 2;
      // rejected
      REJECTED = 3;
    }

    // explicitly include the zero value
    ApprovalState approval_state = 5 [
      (validate.rules).enum = {in: [ 0, 2, 3 ]}
    ];
}
